"""
Tests for 7-base_geometry.py

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print(repr(f"{e.__class__.__name__}: {e}")) # added repr()
'TypeError: name must be an integer'

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print(repr(f"{e.__class__.__name__}: {e}")) # added repr()
'ValueError: age must be greater than 0'

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print(repr(f"{e.__class__.__name__}: {e}")) # added repr()
'ValueError: distance must be greater than 0'

>>> try:
...    bg.integer_validator("test", 0.1)
... except Exception as e:
...    print(repr(f"{e.__class__.__name__}: {e}")) # added repr()
'TypeError: test must be an integer'

>>> try:
...    bg.integer_validator("test", None)
... except Exception as e:
...    print(repr(f"{e.__class__.__name__}: {e}")) # added repr()
'TypeError: test must be an integer'

>>> try:
...    bg.integer_validator("test", [])
... except Exception as e:
...    print(repr(f"{e.__class__.__name__}: {e}")) # added repr()
'TypeError: test must be an integer'
"""
